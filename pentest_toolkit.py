#!/usr/bin/env python3

import sys
import subprocess
import os
import argparse
import time
import re
import socket
from colorama import init, Fore

# تهيئة الألوان
init()

def show_banner():
    banner = '''
    ╔════════════════════════════════════════╗
    ║        Penetration Testing Tools       ║
    ║    (Nikto, WPScan, Maltego, Spider)   ║
    ║         By: Saudi Linux               ║
    ╚════════════════════════════════════════╝
    '''
    print(Fore.CYAN + banner + Fore.RESET)

def check_tools():
    """التحقق من وجود الأدوات المطلوبة"""
    required_tools = ['nikto', 'wpscan', 'maltego', 'sf']
    missing_tools = []

    for tool in required_tools:
        try:
            subprocess.run(['which', tool], capture_output=True, check=True)
        except subprocess.CalledProcessError:
            missing_tools.append(tool)

    if missing_tools:
        print(Fore.RED + 'الأدوات التالية غير مثبتة:' + Fore.RESET)
        for tool in missing_tools:
            print(f'- {tool}')
        print('\nيرجى تثبيت الأدوات المفقودة باستخدام:')
        print('sudo apt install nikto wpscan maltego spiderfoot')
        sys.exit(1)

def run_nikto(target, output_dir):
    """تشغيل أداة Nikto"""
    print(Fore.YELLOW + '\n[+] بدء فحص Nikto...' + Fore.RESET)
    output_file = os.path.join(output_dir, 'nikto_results.txt')
    
    try:
        subprocess.run(['nikto', '-h', target, '-o', output_file], check=True)
        print(Fore.GREEN + f'[✓] تم حفظ نتائج Nikto في: {output_file}' + Fore.RESET)
    except subprocess.CalledProcessError as e:
        print(Fore.RED + f'[!] خطأ في تشغيل Nikto: {str(e)}' + Fore.RESET)

def run_wpscan(target, output_dir):
    """تشغيل أداة WPScan"""
    print(Fore.YELLOW + '\n[+] بدء فحص WPScan...' + Fore.RESET)
    output_file = os.path.join(output_dir, 'wpscan_results.txt')
    
    try:
        subprocess.run(['wpscan', '--url', target, '--output', output_file], check=True)
        print(Fore.GREEN + f'[✓] تم حفظ نتائج WPScan في: {output_file}' + Fore.RESET)
    except subprocess.CalledProcessError as e:
        print(Fore.RED + f'[!] خطأ في تشغيل WPScan: {str(e)}' + Fore.RESET)

def run_maltego(target):
    """تشغيل أداة Maltego"""
    print(Fore.YELLOW + '\n[+] تشغيل Maltego...' + Fore.RESET)
    try:
        subprocess.Popen(['maltego', '-target', target])
        print(Fore.GREEN + '[✓] تم تشغيل Maltego' + Fore.RESET)
    except Exception as e:
        print(Fore.RED + f'[!] خطأ في تشغيل Maltego: {str(e)}' + Fore.RESET)

def run_spiderfoot(target, output_dir):
    """تشغيل أداة Spiderfoot"""
    print(Fore.YELLOW + '\n[+] بدء فحص Spiderfoot...' + Fore.RESET)
    output_file = os.path.join(output_dir, 'spiderfoot_results.txt')
    
    try:
        # تشغيل خادم Spiderfoot
        server_process = subprocess.Popen(['sf', '-l', '127.0.0.1:5001'])
        time.sleep(5)  # انتظار بدء الخادم
        
        # تشغيل الفحص
        scan_cmd = ['sf', '-s', target, '-o', output_file]
        subprocess.run(scan_cmd, check=True)
        
        print(Fore.GREEN + f'[✓] تم حفظ نتائج Spiderfoot في: {output_file}' + Fore.RESET)
        
        # إيقاف الخادم
        server_process.terminate()
    except Exception as e:
        print(Fore.RED + f'[!] خطأ في تشغيل Spiderfoot: {str(e)}' + Fore.RESET)

def validate_target(target):
    """التحقق من صحة الهدف (دومين أو IP)"""
    # التحقق من IP
    ip_pattern = r'^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$'
    if re.match(ip_pattern, target):
        try:
            # التحقق من صحة الـ IP
            parts = [int(part) for part in target.split('.')]
            return all(0 <= part <= 255 for part in parts)
        except ValueError:
            return False
    
    # التحقق من الدومين
    domain_pattern = r'^(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,}$'
    if re.match(domain_pattern, target):
        try:
            # محاولة حل الدومين
            socket.gethostbyname(target)
            return True
        except socket.gaierror:
            return False
    
    return False

def main():
    parser = argparse.ArgumentParser(description='أداة اختبار الاختراق المتكاملة')
    parser.add_argument('-t', '--target', required=True, help='الهدف (مثال: example.com أو 192.168.1.1)')
    parser.add_argument('-o', '--output', default='results', help='مجلد حفظ النتائج')
    args = parser.parse_args()
    
    # التحقق من صحة الهدف
    target = args.target.replace('http://', '').replace('https://', '').split('/')[0]
    if not validate_target(target):
        print(Fore.RED + '[!] هدف غير صالح. يرجى إدخال دومين أو عنوان IP صحيح.' + Fore.RESET)
        sys.exit(1)
    
    # إضافة بروتوكول HTTP إذا لم يكن موجوداً
    if not args.target.startswith(('http://', 'https://')):
        args.target = 'http://' + args.target

    show_banner()
    
    # التحقق من وجود الأدوات
    check_tools()
    
    # إنشاء مجلد النتائج
    os.makedirs(args.output, exist_ok=True)
    
    # تشغيل الأدوات بالترتيب
    run_nikto(args.target, args.output)
    run_wpscan(args.target, args.output)
    run_maltego(args.target)
    run_spiderfoot(args.target, args.output)
    
    print(Fore.GREEN + '\n[✓] اكتمل الفحص! راجع مجلد النتائج للتفاصيل.' + Fore.RESET)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print(Fore.RED + '\n[!] تم إيقاف البرنامج' + Fore.RESET)
        sys.exit(0)
    except Exception as e:
        print(Fore.RED + f'\n[!] خطأ: {str(e)}' + Fore.RESET)
        sys.exit(1)